# CentOS specific worker kubeadm config
preKubeadmCommands:
  - rm /etc/cni/net.d/*
  - systemctl restart NetworkManager.service
  - nmcli connection load /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
  - nmcli connection up {{ IRONIC_ENDPOINT_BRIDGE }}
  - nmcli connection load /etc/NetworkManager/system-connections/{{ bmh_nic_names[0] }}.nmconnection
  - nmcli connection up {{ bmh_nic_names[0] }}
{% if EXTERNAL_VLAN_ID != "" %}
  - nmcli connection load /etc/NetworkManager/system-connections/{{ bmh_nic_names[0] }}.{{ EXTERNAL_VLAN_ID }}.nmconnection
  - nmcli connection up /etc/NetworkManager/system-connections/{{ bmh_nic_names[0] }}.{{ EXTERNAL_VLAN_ID }}.nmconnection
{% endif %}
  - systemctl enable --now crio
  - sleep 30
  - systemctl enable --now kubelet
  - sleep 120
files:
  - path: /usr/local/bin/retrieve.configuration.files.sh
    owner: root:root
    permissions: '0755'
    content: |
        #!/bin/bash
        set -e
        url="$1"
        dst="$2"
        filename="$(basename $url)"
        tmpfile="/tmp/$filename"
        curl -sSL -w "%{http_code}" "$url" | sed "s:/usr/bin:/usr/local/bin:g" > /tmp/"$filename"
        http_status=$(cat "$tmpfile" | tail -n 1)
        if [ "$http_status" != "200" ]; then
          echo "Error: unable to retrieve $filename file";
          exit 1;
        else
          cat "$tmpfile"| sed '$d' > "$dst";
        fi
  - path: /etc/NetworkManager/system-connections/enp{{ bmh_nic_names[0] }}1s0.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id={{ bmh_nic_names[0] }}
      type=ethernet
      interface-name={{ bmh_nic_names[0] }}
      master={{ IRONIC_ENDPOINT_BRIDGE }}
      slave-type=bridge
      autoconnect=yes
      autoconnect-priority=999
  - path: /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id={{ IRONIC_ENDPOINT_BRIDGE }}
      type=bridge
      interface-name={{ IRONIC_ENDPOINT_BRIDGE }}

      [bridge]
      stp=false

      [ipv4]
      address1={{ "{{ ds.meta_data.provisioningIP }}" }}/{{ "{{ ds.meta_data.provisioningCIDR }}" }}
      method=manual

      [ipv6]
      addr-gen-mode=eui64
      method=ignore
  - path : /etc/containers/registries.conf
    owner: root:root
    permissions: '0644'
    content: |
      [registries.search]
      registries = ['docker.io']

      [registries.insecure]
      registries = ['{{ REGISTRY }}']
{% if EXTERNAL_VLAN_ID != "" %}
  - path: /etc/NetworkManager/system-connections/{{ bmh_nic_names[0] }}.{{ EXTERNAL_VLAN_ID }}.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id=Vlan {{ bmh_nic_names[0] }}.{{ EXTERNAL_VLAN_ID }}
      type=vlan
      autoconnect-priority=999
      interface-name={{ bmh_nic_names[0] }}.{{ EXTERNAL_VLAN_ID }}

      [vlan]
      flags=1
      id=3
      parent={{ bmh_nic_names[0] }}

      [ipv4]
      method=auto

      [ipv6]
      addr-gen-mode=eui64
      method=ignore
{% endif %}
